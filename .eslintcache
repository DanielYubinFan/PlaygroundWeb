[{"C:\\workspace\\PersonalWeb\\play-ground\\src\\index.js":"1","C:\\workspace\\PersonalWeb\\play-ground\\src\\Components\\tic-tac-toe.js":"2","C:\\workspace\\PersonalWeb\\play-ground\\src\\Components\\connect-four.js":"3","C:\\workspace\\PersonalWeb\\play-ground\\src\\Components\\weather.js":"4","C:\\workspace\\PersonalWeb\\play-ground\\src\\Components\\yvonne.js":"5"},{"size":945,"mtime":1611789718374,"results":"6","hashOfConfig":"7"},{"size":3682,"mtime":1611739800673,"results":"8","hashOfConfig":"7"},{"size":5370,"mtime":1611304611427,"results":"9","hashOfConfig":"7"},{"size":3527,"mtime":1611739814356,"results":"10","hashOfConfig":"7"},{"size":481,"mtime":1611897476646,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1lmkv7y",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"15"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\workspace\\PersonalWeb\\play-ground\\src\\index.js",["25","26","27","28","29"],"import React from 'react';  \r\nimport ReactDOM from 'react-dom';  \r\nimport { Route, Link, BrowserRouter as Router, Redirect } from 'react-router-dom'  \r\n\r\nimport './index.css'\r\nimport TicTacToe from './Components/tic-tac-toe'; \r\nimport ConnectFour from './Components/connect-four';\r\nimport Weather from './Components/weather';\r\nimport Yvonne from './Components/yvonne';\r\n\r\nconst routing = (  \r\n  <Router>  \r\n    <div className=\"navbar\">\r\n      <a><Link to=\"/\">Home</Link></a>   \r\n      <a><Link to=\"/tictactoe\">Tic-Tac-Toe</Link></a>\r\n      <a><Link to=\"/connectfour\">Connect-Four</Link></a>\r\n      <a><Link to=\"/yvonne\">Yvonne</Link></a>\r\n    </div>  \r\n    <Route exact path=\"/\" component={Weather}/> \r\n    <Route path=\"/tictactoe\" component={TicTacToe}/> \r\n    <Route path=\"/connectfour\" component={ConnectFour}/> \r\n    <Route path=\"/yvonne\" component={Yvonne}/>\r\n  </Router>  \r\n)  \r\nReactDOM.render(routing, document.getElementById('root'));  ",["30","31"],"C:\\workspace\\PersonalWeb\\play-ground\\src\\Components\\tic-tac-toe.js",[],"C:\\workspace\\PersonalWeb\\play-ground\\src\\Components\\connect-four.js",["32"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../Stylesheets/connect-four.css';\r\n\r\nclass ConnectFour extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      player1: 1,\r\n      player2: 2,\r\n      currentPlayer: null,\r\n      board: [],\r\n      gameOver: false,\r\n      message: ''\r\n    };\r\n    \r\n    // Bind play function to App component\r\n    this.play = this.play.bind(this);\r\n  }\r\n  \r\n  // Starts new game\r\n  initBoard() {\r\n    // Create a blank 6x7 matrix\r\n    let board = [];\r\n    for (let r = 0; r < 6; r++) {\r\n      let row = [];\r\n      for (let c = 0; c < 7; c++) { row.push(null) }\r\n      board.push(row);\r\n    }\r\n    \r\n    this.setState({\r\n      board,\r\n      currentPlayer: this.state.player1,\r\n      gameOver: false,\r\n      message: 'The next player is 1 (RED)',\r\n    });\r\n  }\r\n  \r\n  togglePlayer() {\r\n    return (this.state.currentPlayer === this.state.player1) ? this.state.player2 : this.state.player1;\r\n  }\r\n  \r\n  play(c) {\r\n    if (!this.state.gameOver) {\r\n      // Place piece on board\r\n      let board = this.state.board;\r\n      for (let r = 5; r >= 0; r--) {\r\n        if (!board[r][c]) {\r\n          board[r][c] = this.state.currentPlayer;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Check status of board\r\n      let result = this.checkAll(board);\r\n      if (result === this.state.player1) {\r\n        this.setState({ board, gameOver: true, message: 'Player 1 (RED) wins!' });\r\n      } else if (result === this.state.player2) {\r\n        this.setState({ board, gameOver: true, message: 'Player 2 (YELLOW) wins!' });\r\n      } else if (result === 'draw') {\r\n        this.setState({ board, gameOver: true, message: 'Draw game.' });\r\n      } else if (this.state.currentPlayer === 1){\r\n        this.setState({ board, currentPlayer: this.togglePlayer(), message: 'The next player is 2 (YELLOW)'});\r\n      } else if (this.state.currentPlayer === 2){\r\n        this.setState({ board, currentPlayer: this.togglePlayer(), message: 'The next player is 1 (RED)'});\r\n      }\r\n    } else {\r\n      this.setState({ message: 'Game over. Please start a new game.' });\r\n    }\r\n  }\r\n  \r\n  checkVertical(board) {\r\n    // Check only if row is 3 or greater\r\n    for (let r = 3; r < 6; r++) {\r\n      for (let c = 0; c < 7; c++) {\r\n        if (board[r][c]) {\r\n          if (board[r][c] === board[r - 1][c] &&\r\n              board[r][c] === board[r - 2][c] &&\r\n              board[r][c] === board[r - 3][c]) {\r\n            return board[r][c];    \r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  checkHorizontal(board) {\r\n    // Check only if column is 3 or less\r\n    for (let r = 0; r < 6; r++) {\r\n      for (let c = 0; c < 4; c++) {\r\n        if (board[r][c]) {\r\n          if (board[r][c] === board[r][c + 1] && \r\n              board[r][c] === board[r][c + 2] &&\r\n              board[r][c] === board[r][c + 3]) {\r\n            return board[r][c];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  checkDiagonalRight(board) {\r\n    // Check only if row is 3 or greater AND column is 3 or less\r\n    for (let r = 3; r < 6; r++) {\r\n      for (let c = 0; c < 4; c++) {\r\n        if (board[r][c]) {\r\n          if (board[r][c] === board[r - 1][c + 1] &&\r\n              board[r][c] === board[r - 2][c + 2] &&\r\n              board[r][c] === board[r - 3][c + 3]) {\r\n            return board[r][c];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  checkDiagonalLeft(board) {\r\n    // Check only if row is 3 or greater AND column is 3 or greater\r\n    for (let r = 3; r < 6; r++) {\r\n      for (let c = 3; c < 7; c++) {\r\n        if (board[r][c]) {\r\n          if (board[r][c] === board[r - 1][c - 1] &&\r\n              board[r][c] === board[r - 2][c - 2] &&\r\n              board[r][c] === board[r - 3][c - 3]) {\r\n            return board[r][c];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  checkDraw(board) {\r\n    for (let r = 0; r < 6; r++) {\r\n      for (let c = 0; c < 7; c++) {\r\n        if (board[r][c] === null) {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return 'draw';    \r\n  }\r\n  \r\n  checkAll(board) {\r\n    return this.checkVertical(board) || this.checkDiagonalRight(board) || this.checkDiagonalLeft(board) || this.checkHorizontal(board) || this.checkDraw(board);\r\n  }\r\n  \r\n  componentWillMount() {\r\n    this.initBoard();\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"button\" onClick={() => {this.initBoard()}}>New Game</div>\r\n        \r\n        <table>\r\n          <thead>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.board.map((row, i) => (<Row key={i} row={row} play={this.play} />))}\r\n          </tbody>\r\n        </table>\r\n        \r\n        <p className=\"message\">{this.state.message}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Row component\r\nconst Row = ({ row, play }) => {\r\n  return (\r\n    <tr>\r\n      {row.map((cell, i) => <Cell key={i} value={cell} columnIndex={i} play={play} />)}\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst Cell = ({ value, columnIndex, play }) => {\r\n  let color = 'white';\r\n  if (value === 1) {\r\n    color = 'red';\r\n  } else if (value === 2) {\r\n    color = 'yellow';\r\n  }\r\n    \r\n  return (\r\n    <td>\r\n      <div className=\"cell\" onClick={() => {play(columnIndex)}}>\r\n        <div className={color}></div>\r\n      </div>\r\n    </td>\r\n  );\r\n};\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\nexport default ConnectFour;","C:\\workspace\\PersonalWeb\\play-ground\\src\\Components\\weather.js",[],"C:\\workspace\\PersonalWeb\\play-ground\\src\\Components\\yvonne.js",["33"],{"ruleId":"34","severity":1,"message":"35","line":3,"column":48,"nodeType":"36","messageId":"37","endLine":3,"endColumn":56},{"ruleId":"38","severity":1,"message":"39","line":14,"column":7,"nodeType":"40","endLine":14,"endColumn":10},{"ruleId":"38","severity":1,"message":"39","line":15,"column":7,"nodeType":"40","endLine":15,"endColumn":10},{"ruleId":"38","severity":1,"message":"39","line":16,"column":7,"nodeType":"40","endLine":16,"endColumn":10},{"ruleId":"38","severity":1,"message":"39","line":17,"column":7,"nodeType":"40","endLine":17,"endColumn":10},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"34","severity":1,"message":"45","line":2,"column":8,"nodeType":"36","messageId":"37","endLine":2,"endColumn":16},{"ruleId":"46","severity":1,"message":"47","line":12,"column":17,"nodeType":"40","endLine":12,"endColumn":54},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["48"],"no-negated-in-lhs",["49"],"'ReactDOM' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]